import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tasks_repository/tasks_repository.dart';



class TaskRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  Future<List<TaskModel>> getTasks(String userId) async {
    try {
      var tasks = await _firestore.collection('tasks').where('userId', isEqualTo: userId).get();
      return tasks.docs.map((doc) => TaskModel.fromMap(doc.data(), doc.id)).toList();
    } catch (e) {
      throw Exception("Error fetching tasks");
    }
  }

  Future<void> addTask(TaskModel task) async {
    try {
      task = task.copyWith(date: DateTime.now()); // Add the current date
      await _firestore.collection('tasks').add(task.toMap());
    } catch (e) {
      throw Exception("Error adding task");
    }
  }


  Future<void> deleteTask(String taskId) async {
    try {
      await _firestore.collection('tasks').doc(taskId).delete();
    } catch (e) {
      throw Exception("Error deleting task");
    }
  }
  Future<void> updateTask(String taskId, {String? title, String? description, bool? isDone,bool? isImportant, DateTime? date,}) async {
    try {
      Map<String, dynamic> updatedFields = {};
      if (title != null) updatedFields['title'] = title;
      if (description != null) updatedFields['description'] = description;
      if (isDone != null) updatedFields['isDone'] = isDone;
      if (isImportant != null) updatedFields['isImportant'] = isImportant;
      if (date != null) updatedFields['date'] = date;
      await _firestore.collection('tasks').doc(taskId).update(updatedFields);
    } catch (e) {
      throw Exception("Error updating task");
    }
  }


  // Helper method to create a TaskModel instance
  TaskModel createTask({String title = "", String description = "",bool isImportant = false, bool isDone = false, required DateTime date}) {
    return TaskModel(
      id: "", // This will be generated by Firestore
      userId: "",
      title: title,
      description: description,
      isDone: isDone,
      isImportant: isImportant,
      date: date,
    );
  }
}
